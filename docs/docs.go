// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Get the root endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Root"
                ],
                "summary": "Get root endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.jsonResponse"
                        }
                    }
                }
            }
        },
        "/schedule/day": {
            "get": {
                "description": "Get meets for day",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Get meets for day",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Date of the day (YYYY-MM-DD)",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful assignment",
                        "schema": {
                            "$ref": "#/definitions/handlers.jsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid date format",
                        "schema": {
                            "$ref": "#/definitions/handlers.jsonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.jsonResponse"
                        }
                    }
                }
            }
        },
        "/schedule/reserve": {
            "post": {
                "description": "Assign meet for the day",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Assign meet for the day",
                "parameters": [
                    {
                        "description": "Request payload",
                        "name": "requestPayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.requestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful assignment",
                        "schema": {
                            "$ref": "#/definitions/handlers.jsonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.jsonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.jsonResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.requestPayload": {
            "type": "object",
            "properties": {
                "date_from": {
                    "type": "string"
                },
                "date_to": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3333",
	BasePath:         "/api/v1/",
	Schemes:          []string{},
	Title:            "strange API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
